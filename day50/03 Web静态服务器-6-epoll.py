# 1、IO 多路复用


# 就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO
# select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO

# epoll的优点：

# 没有最大并发连接的限制，能打开的FD(指的是文件描述符，通俗的理解就是套接字对应的数字编号)的上限远大于1024

# 效率提升，不是轮询的方式，不会随着FD数目的增加效率下降，只有活跃可用的FD才会调用callback函数
# epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，epoll的效率就会远远高于select和poll


# 2、epoll简单模型


# 3、web静态服务器-epool


# 4、I/O 多路复用的特点：

# 通过一种机制使一个进程能同时等待多个文件描述符，而这些文件描述符其中的任意一个进入读就绪状态，epoll()函数就可以返回
# 所以, IO多路复用，本质上不会有并发的功能，因为任何时候还是只有一个进程或线程进行工作
# 它之所以能提高效率是因为select/epoll 把进来的socket放到他们的 '监视' 列表里面，当任何socket有可读可写数据立马处理
# 那如果select/epoll 手里同时检测着很多socket，一有动静马上返回给进程处理，总比一个一个socket过来,阻塞等待,处理效率高

# 当然也可以多线程/多进程方式，一个连接过来开一个进程/线程处理，这样消耗的内存和进程切换页会耗掉更多的系统资源
# 所以我们可以结合IO多路复用和多进程/多线程来高性能并发，IO复用负责提高接受socket的通知效率，收到请求后，交给进程池/线程池来处理逻辑
